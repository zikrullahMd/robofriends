{"version":3,"sources":["Card.js","serviceWorker.js","CardList.js","robots.js","SearchBox.js","App.js","index.js"],"names":["Card","props","className","src","id","alt","name","email","username","Boolean","window","location","hostname","match","CardList","robots","cardArray","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","filterRobots","this","filter","toLowerCase","includes","React","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.acda0369.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Card =(props)=>{\r\n    return(\r\n        <div className=\"tc bg-light-red dib br4 pa3 ma2 grow bw2 shadow-5 link dim black b\">\r\n            <img src={`https://robohash.org/${props.id}?200x200`} alt='robots'/>\r\n            <div>\r\n                <h2>{props.name}</h2>\r\n                <p>{props.email}</p>\r\n                <p>{props.username}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Card;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({robots}) =>{\r\n    const cardArray = robots.map((user,i)=>{\r\n        return <Card id = {robots[i].id} name={robots[i].name} email={robots[i].email } username={robots[i].username}/>;\r\n    })\r\n    return (\r\n        <div>\r\n            \r\n            {cardArray};\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CardList;","export const robots = [\r\n    {\r\n        id : 1,\r\n        name : 'Kota Srikar',\r\n        username : 'Srikar',\r\n        email : 'kotasrikar@gmail.com',\r\n        \r\n    },\r\n    {\r\n        id : 2,\r\n        name : 'MD Q Arshad',\r\n        username : 'Ashiq Awara',\r\n        email : 'mujhepehchano@gmail.com',\r\n        \r\n    },\r\n    {\r\n        id : 3,\r\n        name : 'Vivek',\r\n        username : 'JVSV',\r\n        email : 'vivekjvs@gmail.com',\r\n        \r\n    },\r\n    {\r\n        id : 4,\r\n        name : 'Balaji',\r\n        username : 'Balu',\r\n        email : 'balaji@gmail.com',\r\n        \r\n    },\r\n    {\r\n        id : 5,\r\n        name : 'Dheeraj',\r\n        username : 'Pulihoraja',\r\n        email : 'dcdcdcdc@gmail.com',\r\n        \r\n    },\r\n    {\r\n        id : 6,\r\n        name : 'Arman Ahmad',\r\n        username : 'Arman',\r\n        email : 'armanahmad@gmail.com',\r\n        \r\n    },\r\n    {\r\n        id : 7,\r\n        name : 'Phaneendar Reddy',\r\n        username : 'Phani',\r\n        email : 'phaniphani@gmail.com',\r\n        \r\n    },\r\n    {\r\n        id : 8,\r\n        name : 'Nawab Sahab',\r\n        username : 'Bakra',\r\n        email : 'bakra@gmail.com',\r\n        \r\n    },\r\n    {\r\n        id : 9,\r\n        name : 'Ajju',\r\n        username : 'Chor',\r\n        email : 'pakit@gmail.com',\r\n        \r\n    },\r\n    {\r\n        id : 10,\r\n        name : 'Edward',\r\n        username : 'Eddy',\r\n        email : 'edison@gmail.com',\r\n        \r\n    },\r\n    {\r\n        id : 11,\r\n        name : 'Chitresh Apte',\r\n        username : 'Chitresh',\r\n        email : 'Aptechitresh@gmail.com',\r\n        \r\n    },\r\n    {\r\n        id : 12,\r\n        name : 'Ashraf',\r\n        username : 'Ash',\r\n        email : 'mdashraf@gmail.com',\r\n        \r\n    },\r\n    {\r\n        id : 13,\r\n        name : 'Munna Tripathi',\r\n        username : 'Munna Bhaiya',\r\n        email : 'munna_bhaiya@gmail.com',\r\n        \r\n    },\r\n    {\r\n        id : 14,\r\n        name : 'Akhandanand Tripathi',\r\n        username : 'Kaleen Bhaiya',\r\n        email : 'best_carpet@gmail.com',\r\n        \r\n    },\r\n    {\r\n        id : 15,\r\n        name : 'Guddu Pandith',\r\n        username : 'Guddu',\r\n        email : 'guddu_bhaiya@gmail.com',\r\n        \r\n    },\r\n    {\r\n        id : 16,\r\n        name : 'Bablu Pandit',\r\n        username : 'bablu',\r\n        email : 'bablu_bhaiya@gmail.com',\r\n        \r\n    },\r\n    {\r\n        id : 17,\r\n        name : 'Md Zikrullah',\r\n        username : 'Zik',\r\n        email : 'kink_of_mirzapur@gmail.com',\r\n        \r\n    },\r\n    {\r\n        id : 18,\r\n        name : 'Zeeshan',\r\n        username : 'zee',\r\n        email : 'thisiszeeshan@gmail.com',\r\n        \r\n    },\r\n    {\r\n        id : 19,\r\n        name : 'Yasmin Anjum',\r\n        username : 'Butkuni',\r\n        email : 'yasmin@gmail.com',\r\n        \r\n    },\r\n    {\r\n        id : 20,\r\n        name : 'Naseem Ahmad',\r\n        username : 'ahmad',\r\n        email : 'ahmad@gmail.com',\r\n        \r\n    },\r\n    {\r\n        id : 21,\r\n        name : 'Tarana Anjum',\r\n        username : 'tarana',\r\n        email : 'tarana_anjum@gmail.com',\r\n        \r\n    },\r\n    {\r\n        id : 22,\r\n        name : 'Arif Ali',\r\n        username : 'Miya bhai',\r\n        email : 'hyd_ki_shaan@gmail.com',\r\n        \r\n    },\r\n    {\r\n        id : 23,\r\n        name : 'Penny',\r\n        username : 'pen',\r\n        email : 'penny_bbt@gmail.com',\r\n        \r\n    },\r\n    {\r\n        id : 24,\r\n        name : 'Sheldon',\r\n        username : 'shel',\r\n        email : 'sheldon_bbt@gmail.com',\r\n        \r\n    },\r\n    {\r\n        id : 25,\r\n        name : 'Leonard',\r\n        username : 'leo',\r\n        email : 'leo_bbt@gmail.com',\r\n        \r\n    },\r\n    {\r\n        id : 26,\r\n        name : 'Raj Koothra',\r\n        username : 'raj',\r\n        email : 'raj_bbt@gmail.com',\r\n        \r\n    },\r\n    {\r\n        id : 27,\r\n        name : 'Howard',\r\n        username : 'how?',\r\n        email : 'howard_bbt@gmail.com',\r\n        \r\n    },\r\n    {\r\n        id : 28,\r\n        name : 'Professor',\r\n        username : 'Profesor',\r\n        email : 'professon_ldp@gmail.com',\r\n        \r\n    },\r\n    {\r\n        id : 29,\r\n        name : 'Tokyo',\r\n        username : 'tok',\r\n        email : 'tokyo_ldp@gmail.com',\r\n        \r\n    },\r\n    {\r\n        id : 30,\r\n        name : 'Raquel',\r\n        username : 'raq',\r\n        email : 'raq_ldp@gmail.com',\r\n        \r\n    },\r\n    {\r\n        id : 31,\r\n        name : 'Nairobi',\r\n        username : 'nai',\r\n        email : 'nairobi_ldp@gmail.com',\r\n        \r\n    },\r\n    {\r\n        id : 32,\r\n        name : 'Denver',\r\n        username : 'den',\r\n        email : 'denver_lcd@gmail.com',\r\n        \r\n    },\r\n    {\r\n        id : 33,\r\n        name : 'Berlin',\r\n        username : 'berlin',\r\n        email : 'berlin_ldp@gmail.com',\r\n        \r\n    },\r\n    {\r\n        id : 34,\r\n        name : 'Rio',\r\n        username : 'Ri',\r\n        email : 'rio_ldp@gmail.com',\r\n        \r\n    },\r\n    {\r\n        id : 35,\r\n        name : 'Monica',\r\n        username : 'moni',\r\n        email : 'monica_ldp@gmail.com',\r\n        \r\n    },\r\n    {\r\n        id : 36,\r\n        name : 'Helsinki',\r\n        username : 'helsi',\r\n        email : 'helsinki_ldp@gmail.com',\r\n        \r\n    },\r\n    {\r\n        id : 37,\r\n        name : 'Arturo',\r\n        username : 'pain_in_ass',\r\n        email : 'arturo_ldp@gmail.com',\r\n        \r\n    },\r\n    {\r\n        id : 38,\r\n        name : 'Suarez',\r\n        username : 'Su',\r\n        email : 'suarez_martinki_ldp@gmail.com',\r\n        \r\n    }\r\n];","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield,searchChange}) =>{\r\n    return (\r\n      <div>\r\n        <input className = 'pa3 ba b--green bg-lightest-blue'\r\n         type='search' \r\n         placeholder='Search for robots'\r\n         onChange={searchChange}\r\n         /> \r\n      </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\nimport CardList from './CardList';\r\nimport { robots } from './robots';\r\nimport './App.css'\r\nimport SearchBox from './SearchBox';\r\nimport scroll from './Scroll';\r\n\r\nclass App extends React.Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            robots : [],\r\n            searchfield : ''\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(users => {this.setState({robots : robots})});\r\n    }\r\n    onSearchChange = (event)=>{\r\n        this.setState({searchfield : event.target.value})\r\n        \r\n    }\r\n    render(){\r\n        const filterRobots = this.state.robots.filter(robots =>{\r\n            return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n        } )\r\n        return (\r\n            <div className='tc'>\r\n                <h1 className='f1'>RoboFriends</h1>\r\n                <SearchBox searchChange={this.onSearchChange}/>\r\n                <scroll>\r\n                    <CardList robots={filterRobots}/>\r\n                </scroll>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport card from './Card';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\nimport Cardlist from './CardList';\nimport App from './App';\n\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}